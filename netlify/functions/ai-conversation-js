// AI Conversation Handler for German Learning
exports.handler = async (event, context) => {
  // Handle CORS preflight
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
      }
    };
  }

  if (event.httpMethod !== 'POST') {
    return { statusCode: 405, body: 'Method Not Allowed' };
  }

  try {
    const { message, context: conversationContext, history } = JSON.parse(event.body);
    
    if (!message) {
      return { statusCode: 400, body: JSON.stringify({ error: 'Message is required' }) };
    }

    const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
    
    // If no API key, return a helpful mock response
    if (!ANTHROPIC_API_KEY) {
      console.log('No Anthropic API key found, returning mock response.');
      return {
        statusCode: 200,
        headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: getMockResponse(message, conversationContext),
          corrections: getMockCorrections(message),
          metrics: { accuracy: 85, fluency: 70, grammar_accuracy: 80, vocabulary_usage: 75 },
          suggestions: [{ type: 'general', action: 'Add an Anthropic API key for full AI features!' }]
        })
      };
    }
    
    // If API key exists, call the real API (logic for this would go here)
    // For now, we can return a more advanced mock response to simulate it
    const systemPrompt = generateSystemPrompt(conversationContext);
    
    // This is where you would make the actual fetch call to the Anthropic API
    // For now, we'll simulate a successful response
    return {
      statusCode: 200,
      headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },
      body: JSON.stringify({
        text: `(Simulated AI Response) Das ist eine sehr gute Frage zu: "${message}". Basierend auf dem Podcast, könnten wir diskutieren...`,
        corrections: analyzeGrammar(message),
        metrics: calculatePerformanceMetrics(message, analyzeGrammar(message), conversationContext),
        suggestions: generateNextSteps(calculatePerformanceMetrics(message, analyzeGrammar(message), conversationContext))
      })
    };

  } catch (error) {
    console.error('AI Conversation Error:', error);
    return {
      statusCode: 500,
      headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' },
      body: JSON.stringify({ error: 'Internal server error' })
    };
  }
};

// --- Helper and Mocking Functions ---

function generateSystemPrompt(context) {
    const { podcast, userLevel } = context || {};
    return `You are a German language teacher for a ${userLevel || 'B2'} student. The student just listened to a podcast: "${podcast?.title || 'a German podcast'}". Your goal is to discuss the topic in German, correct their mistakes gently, and help them learn.`;
}

function getMockResponse(message, context) {
    const msg = message.toLowerCase();
    if (msg.includes('hallo') || msg.includes('guten')) return "Hallo! Wie geht es Ihnen heute? Haben Sie schon einen Podcast gehört?";
    if (msg.includes('podcast')) return "Der Podcast war sehr interessant! Was war Ihr Lieblingsteil?";
    if (msg.includes('grammatik')) return "Gute Frage! Im Deutschen funktioniert das so...";
    return "Sehr gut! Ihr Deutsch wird immer besser! Lassen Sie uns weitermachen.";
}

function getMockCorrections(message) {
    const corrections = [];
    if (message.match(/\bich\s+habe\s+gegangen\b/i)) {
        corrections.push({ original: 'ich habe gegangen', corrected: 'ich bin gegangen', explanation: 'Bewegungsverben bilden das Perfekt mit "sein".' });
    }
    if (message.match(/\bder\s+frau\b/i)) {
        corrections.push({ original: 'der Frau', corrected: 'die Frau', explanation: '"Frau" ist feminin und braucht den Artikel "die" im Nominativ.' });
    }
    return corrections;
}

function analyzeGrammar(text) { return getMockCorrections(text); } // Reuse for simplicity

function calculatePerformanceMetrics(message, corrections) {
    const wordCount = message.split(' ').length;
    const errorRate = corrections.length / Math.max(wordCount, 1);
    return {
        accuracy: Math.max(0, Math.round(100 - (errorRate * 50))),
        fluency: Math.min(100, 50 + wordCount * 5),
        grammar_accuracy: Math.max(0, 100 - (corrections.length * 10)),
        vocabulary_usage: Math.min(100, 50 + new Set(message.split(' ')).size * 5)
    };
}

function generateNextSteps(metrics) {
    const suggestions = [];
    if (metrics.grammar_accuracy < 80) suggestions.push({ type: 'Grammar', action: 'Review verb conjugations.' });
    if (metrics.vocabulary_usage < 70) suggestions.push({ type: 'Vocabulary', action: 'Try to use more unique words from the podcast.' });
    return suggestions;
}
